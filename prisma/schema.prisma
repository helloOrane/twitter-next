// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// =========== AUTH ===========
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? 
  access_token      String? 
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? 
  session_state     String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  username      String?
  displayName   String?
  bio           String?
  location      String?
  tweets        Tweet[]
  followers     UserFollower[] @relation(name: "Followers")
  following     UserFollower[] @relation(name: "Following")
  TweetsOnLikes TweetOnLike[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// =========== MODELS ===========

// relation 1-1
model UserFollower {
  id          String @id @default(cuid())
  follower    User   @relation(fields: [followerId], references: [id], name: "Followers")
  followerId  String
  following   User   @relation(fields: [followingId], references: [id], name: "Following")
  followingId String

  @@unique([followerId, followingId])
}

model Tweet {
  id        String        @id @default(cuid())
  content   String
  createdAt DateTime      @default(now())
  parent    Tweet?        @relation(name: "Replies", fields: [tweetId], references: [id])
  replies   Tweet[]       @relation(name: "Replies")
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  tweetId   String?
  likes     TweetOnLike[]
}
model TweetOnLike {
  id      String @id @default(cuid())
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  tweetId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([tweetId, userId])
}
